{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Xournal++ HTR","text":"<p>Developing handwritten text recognition for Xournal++.</p> <p>Your contributions are greatly appreciated!</p> <p>TODO: Make this documentation the central part and adapt README for example like here. Replicate sections of current README here therefore.</p>"},{"location":"#xournal-htr-in-90-seconds","title":"Xournal++ HTR in 90 seconds","text":"(Click here to get to video on YouTube.)"},{"location":"#why-handwritten-text-recognition-for-xournal","title":"Why handwritten text recognition for Xournal++?","text":"<p>When moving from physical to digital note taking, one great benefit is searchability. Hence, when starting to use digital handwritten notes, those should be searchable as well as to not compromise on the benefits of digital note taking. This feature is called handwritten text recognition.</p> <p>The handwritten text recognition feature has been part of many commercial note taking apps for ages.</p> <p>However, there exists no such handwritten text recognition feature for any open source handwriting application.</p> <p>Hence, the goal of Xournal++ HTR is to bring handwritten text recognition to Xournal++, which is one of the most popular open-source applications to take digital handwritten notes.</p>"},{"location":"#content-of-these-websites","title":"Content of these websites","text":"<p>These websites document Xournal++ HTR. In the navigation bar, you can find instructions on how to install the project, use the project and more advanced topics like how you can contribute code and own models. Many of the documents come with small videos to get you going quicker.</p> <p>To assist you in training your own models, Xournal++ HTR comes with many helper functions and convenience code infrastructure.</p>"},{"location":"#cite","title":"Cite","text":"<p>If you are using Xournal++ HTR for your research, I'd appreciate if you could cite it. Use:</p> <pre><code>@software{Lellep_Xournalpp_HTR,\n  author = {Lellep, Martin},\n  title = {xournalpp_htr},\n  url = {https://github.com/PellelNitram/xournalpp_htr},\n  license = {GPL-2.0},\n}\n</code></pre> <p>(Also consider starring the project on GitHub.)</p>"},{"location":"#funding","title":"Funding","text":"<p>TODO: Add a buy me a coffee link.</p>"},{"location":"#project-description","title":"Project description","text":"<p>Taking handwritten notes digitally comes with many benefits but lacks searchability of your notes. Hence, there is a need to make your handwritten notes searchable. This can be achieved with \"handwritten text recognition\" (HTR), which is the process of assigning searchable text to written strokes.</p> <p>While many commercial note taking apps feature great HTR systems to make your notes searchable and there are a number of existing open-source implementations of various algorithms, there is no HTR feature available in an open-source note taking application that is privacy aware and processes your data locally.</p> <p>The purpose of the Xournal++ HTR project is to change that!</p> <p>Xournal++ HTR strives to bring open-source on-device handwriting recognition to Xournal++ as it is one of the most adopted open-source note taking apps and thereby HTR can be delivered to the largest possible amount of users.</p>"},{"location":"#training","title":"Training","text":""},{"location":"#installation","title":"Installation","text":"<p>Follow the above installation procedure and replace the step <code>pip install -r requirements.txt</code> by both <code>pip install -r requirements.txt</code> and <code>pip install -r requirements_training.txt</code> to install both the inference and training dependencies.</p>"},{"location":"#project-design","title":"Project design","text":"<p>The design of Xournal++ HTR tries to bridge the gap between both delivering a production ready product and allowing contributors to experiment with new algorithms.</p> <p>The project design involves a Lua plugin and a Python backend, see the following figure. First, the production ready product is delivered by means of an Xournal++ plugin. The plugin is fully integrated in Xournal++ and calls a Python backend that performs the actual transcription. The Python backend allows selection of various recognition models and is thereby fully extendable with new models.</p> <p>Design of xournalpp_htr.</p> <p>An alternative figure is shown below: (todo: restructure readme)</p> <pre><code>sequenceDiagram\n    User in Xpp--&gt;&gt;Xpp HTR Plugin: starts process using currently open file\n    Xpp HTR Lua Plugin --&gt;&gt;Xpp HTR Python Backend: constructs command using CLI\n    Xpp HTR Python Backend --&gt;&gt; Xpp HTR Python Backend: Does OCR &amp; stores PDF\n    Xpp HTR Python Backend--&gt;&gt;User in Xpp: Gives back control to UI\n</code></pre> <p>Developing a usable HTR systems requires experimentation. The project structure is set up to accommodate this need. Note that ideas on improved project structures are appreciated.</p> <p>The experimentation is carried out in terms of \"concepts\". Each concept explores a different approach to HTR and possibly improves over previous concepts, but not necessarily to allow for freedom in risky experiments. Concept 1 is already implemented and uses a computer vision approach that is explained below.</p> <p>Future concepts might explore: - Retrain computer vision models from concept 1 using native data representation of Xournal++ - Use sequence-to-sequence models to take advantage of native data representation of Xournal++ - Use data augmentation to increase effective size of training data - Use of language models to correct for spelling mistakes</p>"},{"location":"#concept-1","title":"Concept 1","text":"<p>This concept uses computer vision based algorithms to first detect words on a page and then to read those words.</p> <p>The following shows a video demo on YouTube using real-life handwriting data from a Xournal file:</p> <p></p> <p>Despite not being perfect, the main take away is that the performance is surprisingly good given that the underlying algorithm has not been optimised for Xournal++ data at all.</p> <p>The performance is sufficiently good to be useful for the Xournal++ user base.</p> <p>Feel free to play around with the demo yourself using this code after installing this project. The \"concept 1\" is also what is currently used in the plugin and shown in the 90 seconds demo.</p> <p>Next steps to improve the performance of the handwritten text recognition even further could be: - Re-train the algorithm on Xournal++ specific data, while potentially using data augmentation. - Use language model to improve text encoding. - Use sequence-to-sequence algorithm that makes use of Xournal++'s data format. This translates into using online HTR algorithms.</p> <p>I would like to acknowledge Harald Scheidl in this concept as he wrote the underlying algorithms and made them easily usable through his HTRPipeline repository - after all I just feed his algorithm Xournal++ data in concept 1. Go check out his great content!</p>"},{"location":"#code-quality","title":"Code quality","text":"<p>We try to keep up code quality as high as practically possible. For that reason, the following steps are implemented:</p> <ul> <li>Testing. Xournal++ HTR uses <code>pytest</code> for implementing unit, regression and integration tests.</li> <li>Linting. Xournal++ HTR uses <code>ruff</code> for linting and code best practises. <code>ruff</code> is implemented as git pre-commit hook. Since <code>ruff</code> as pre-commit hook is configured externally with <code>pyproject.toml</code>, you can use the same settings in your IDE if you wish to speed up the process.</li> <li>Formatting. Xournal++ HTR uses <code>ruff-format</code> for consistent code formatting. <code>ruff-format</code> is implemented as git pre-commit hook. Since <code>ruff-format</code> as pre-commit hook is configured externally with <code>pyproject.toml</code>, you can use the same settings in your IDE if you wish to speed up the process.</li> </ul>"},{"location":"contributing/","title":"Contributing","text":"<p>Find open issues here.</p> (Click here to get to video on YouTube.)"},{"location":"contributing/#summary","title":"Summary","text":"<p>TODO: Add video here.</p>"},{"location":"contributing/#in-detail","title":"In detail","text":"<p>TODO: Add text here.</p>"},{"location":"contributing/#code-quality","title":"Code quality","text":"<p>We try to keep up code quality as high as practically possible. For that reason, the following steps are implemented:</p> <ul> <li>Testing. Xournal++ HTR uses <code>pytest</code> for implementing unit, regression and integration tests.</li> <li>Linting. Xournal++ HTR uses <code>ruff</code> for linting and code best practises. <code>ruff</code> is implemented as git pre-commit hook. Since <code>ruff</code> as pre-commit hook is configured externally with <code>pyproject.toml</code>, you can use the same settings in your IDE if you wish to speed up the process.</li> <li>Formatting. Xournal++ HTR uses <code>ruff-format</code> for consistent code formatting. <code>ruff-format</code> is implemented as git pre-commit hook. Since <code>ruff-format</code> as pre-commit hook is configured externally with <code>pyproject.toml</code>, you can use the same settings in your IDE if you wish to speed up the process.</li> </ul>"},{"location":"contributing/#contributions","title":"Contributions","text":"<p>The following branching strategy is used to keep the <code>master</code> branch stable and allow for experimentation: <code>master</code> &gt; <code>dev</code> &gt; <code>feature branches</code>. This branching strategy is shown in the following visualisation and then explained in more detail in the next paragraph:</p> <pre><code>%%{init:{  \"gitGraph\":{ \"mainBranchName\":\"master\" }}}%%\ngitGraph\n    commit\n    commit\n    branch dev\n    commit\n    checkout dev\n    commit\n    commit\n    branch feature/awesome_new_feature\n    commit\n    checkout feature/awesome_new_feature\n    commit\n    commit\n    commit\n    checkout dev\n    merge feature/awesome_new_feature\n    commit\n    commit\n    checkout master\n    merge dev\n    commit\n    commit\n</code></pre> <p>In more details, this repository adheres to the following git branching strategy: The <code>master</code> branch remains stable and delivers a functioning product. The <code>dev</code> branch consists of all code that will be merged to <code>master</code> eventually where the corresponding features are developed in individual feature branches; the above visualisation shows an example feature branch called <code>feature/awesome_new_feature</code> that works on a feature called <code>awesome_new_feature</code>.</p> <p>Given this structure, please implement new features as feature branches and rebase them onto the <code>dev</code> branch prior to sending a pull request to <code>dev</code>.</p> <p>Note: The Github Actions CI/CD pipeline runs on the branches <code>master</code> and <code>dev</code>.</p>"},{"location":"data_collection/","title":"Data collection and annotation","text":"(Click here to get to video on YouTube.) <p>TODO</p>"},{"location":"developing_new_models/","title":"Developing new models","text":"(Click here to get to video on YouTube.) <ul> <li>I provide dataset and code to experiment w/ new models</li> <li>train both your own bespoke and general models.</li> </ul>"},{"location":"installation/","title":"Installation","text":"<p>This project consists of both the inference and training code. Most users will only be interested in the inference part, so that the below only comprises of the inference part that you need to execute the plugin from within Xournal++.</p> <p>The training part is optional and allows to help to train our own models which improve over time. These installation process is optional and detailed further below.</p>"},{"location":"installation/#linux","title":"Linux","text":"<p>Run <code>bash INSTALL_LINUX.sh</code> from repository root directory.</p> <p>This script also installs the plugin as explained in the last point of the cross-platform installation procedure. The installation of the plugin is performed with <code>plugin/copy_to_plugin_folder.sh</code>, which can also be invoked independently of <code>INSTALL_LINUX.sh</code> for updating the plugin installation.</p>"},{"location":"installation/#cross-platform","title":"Cross-platform","text":"<p>Execute the following commands:</p> <ol> <li>Create an environment: <code>conda create --name xournalpp_htr python=3.10.11</code>.</li> <li>Use this environment: <code>conda activate xournalpp_htr</code>.</li> <li>Install HTRPipelines package using its installation guide.</li> <li>Install all dependencies of this package <code>pip install -r requirements.txt</code>.</li> <li>Install the package in development mode with <code>pip install -e .</code> (do not forget the dot, '.').</li> <li>Install pre-commit hooks with: <code>pre-commit install</code>.</li> <li>Move <code>plugin/</code> folder content to <code>${XOURNAL_CONFIG_PATH}/plugins/xournalpp_htr/</code> with <code>${XOURNAL_CONFIG_PATH}</code> being the configuration path of Xournal++, see Xournal++ manual here.</li> <li>Edit <code>config.lua</code>, setting <code>_M.python_executable</code> to your python executable in the conda environment and <code>_M.xournalpp_htr_path</code> to the absolute path of this repo. See the example config for details in <code>plugin/config.lua</code>.</li> <li>Ensure Xournal++ is on your <code>PATH</code>. See here for the binary location.</li> </ol>"},{"location":"installation/#after-installation","title":"After installation","text":"<p>Confirm that the installation worked by running <code>make tests-installation</code> from repository root directory.</p>"},{"location":"roadmap/","title":"Roadmap","text":"(Click here to get to video on YouTube.) <p>TODO</p> <ul> <li>build model</li> <li>collect data</li> </ul>"},{"location":"usage/","title":"Usage","text":""},{"location":"usage/#usage","title":"Usage","text":"<p>Details relevant for usage of the plugin:</p> <ol> <li>Make sure to save your file beforehand. The plugin will also let you know that you    need to save your file first.</li> <li>After installation, navigate to <code>Plugin &gt; Xournal++ HTR</code> to invoke the plugin. Then    select a filename and press <code>Save</code>. Lastly, wait a wee bit until the process is    finished; the Xournal++ UI will block while the plugin applies HTR to your file.    If you opened Xournal++ through a command-line, you can see progress bars that show    the HTR process in real-time.</li> </ol> <p>Note: Currently, the Xournal++ HTR plugin requires you to use a nightly build of Xournal++ because it uses upstream Lua API features that are not yet part of the stable build. Using the officially provided Nightly AppImag, see here, is very convenient. The plugin has been tested with the following nightly Linux build of Xournal++:</p> <pre><code>xournalpp 1.2.3+dev (583a4e47)\n\u2514\u2500\u2500libgtk: 3.24.20\n</code></pre> <p>Details relevant for development of the plugin:</p> <ol> <li>Activate environment: <code>conda activate xournalpp_htr</code>. Alternatively use <code>source activate_env.sh</code> as shortcut.</li> <li>Use the code.</li> <li>To update the requirements file: <code>pip freeze &gt; requirements.txt</code>.</li> </ol>"},{"location":"images/TODO/","title":"TODO","text":"<ul> <li>Add 90s qiuckstart video and document.</li> </ul>"}]}